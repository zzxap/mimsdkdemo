// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `abc`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      lookup)
      : _lookup = lookup;

  void initcb(
      OpenFunc mopenfunc,
      ) {
    return _initcb(
      mopenfunc,
    );
  }

  late final _initcbPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(OpenFunc)>>('initcb');
  late final _initcb = _initcbPtr.asFunction<void Function(OpenFunc)>();

  void goCallback(
      ffi.Pointer<ffi.Char> s,
      int i,
      ) {
    return _goCallback(
      s,
      i,
    );
  }

  late final _goCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('goCallback');
  late final _goCallback =
  _goCallbackPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void callbackTriger(
      ffi.Pointer<ffi.Void> cb,
      ) {
    return _callbackTriger(
      cb,
    );
  }

  late final _callbackTrigerPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'callbackTriger');
  late final _callbackTriger =
  _callbackTrigerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void testcb() {
    return _testcb();
  }

  late final _testcbPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('testcb');
  late final _testcb = _testcbPtr.asFunction<void Function()>();

  void call_later_go_cb(
      ffi.Pointer<ffi.Void> data,
      ) {
    return _call_later_go_cb(
      data,
    );
  }

  late final _call_later_go_cbPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'call_later_go_cb');
  late final _call_later_go_cb =
  _call_later_go_cbPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void InitializeDartApi(
      ffi.Pointer<ffi.Void> api,
      ) {
    return _InitializeDartApi(
      api,
    );
  }

  late final _InitializeDartApiPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'InitializeDartApi');
  late final _InitializeDartApi =
  _InitializeDartApiPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void InitSDKWithFFI(
      int appId,
      ffi.Pointer<ffi.Char> sdkConfig,
      int port,
      ffi.Pointer<ffi.Char> mode,
      ) {
    return _InitSDKWithFFI(
      appId,
      sdkConfig,
      port,
      mode,
    );
  }

  late final _InitSDKWithFFIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GoInt64, ffi.Pointer<ffi.Char>, GoInt64,
              ffi.Pointer<ffi.Char>)>>('InitSDKWithFFI');
  late final _InitSDKWithFFI = _InitSDKWithFFIPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void InitSDK(
      int appId,
      ffi.Pointer<ffi.Char> sdkConfig,
      ffi.Pointer<ffi.Char> mode,
      ) {
    return _InitSDK(
      appId,
      sdkConfig,
      mode,
    );
  }

  late final _InitSDKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GoInt64, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('InitSDK');
  late final _InitSDK = _InitSDKPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void DisconnectServer() {
    return _DisconnectServer();
  }

  late final _DisconnectServerPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisconnectServer');
  late final _DisconnectServer =
  _DisconnectServerPtr.asFunction<void Function()>();

  void ReConnectServer() {
    return _ReConnectServer();
  }

  late final _ReConnectServerPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('ReConnectServer');
  late final _ReConnectServer =
  _ReConnectServerPtr.asFunction<void Function()>();

  void GetVerifyCode(
      ffi.Pointer<ffi.Char> mobile,
      ) {
    return _GetVerifyCode(
      mobile,
    );
  }

  late final _GetVerifyCodePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
      'GetVerifyCode');
  late final _GetVerifyCode =
  _GetVerifyCodePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LoginByVerifyCode(
      ffi.Pointer<ffi.Char> mobile,
      ffi.Pointer<ffi.Char> VerificationCode,
      ) {
    return _LoginByVerifyCode(
      mobile,
      VerificationCode,
    );
  }

  late final _LoginByVerifyCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LoginByVerifyCode');
  late final _LoginByVerifyCode = _LoginByVerifyCodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void SendMessage(
      int messageType,
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      ffi.Pointer<ffi.Char> message,
      ) {
    return _SendMessage(
      messageType,
      fromId,
      toId,
      message,
    );
  }

  late final _SendMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GoInt, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SendMessage');
  late final _SendMessage = _SendMessagePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void SendGroupMessage(
      int messageType,
      ffi.Pointer<ffi.Char> groupId,
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> message,
      ) {
    return _SendGroupMessage(
      messageType,
      groupId,
      fromId,
      message,
    );
  }

  late final _SendGroupMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GoInt, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SendGroupMessage');
  late final _SendGroupMessage = _SendGroupMessagePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> SendAnySingleMessage(
      int cmd,
      int messageType,
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      ffi.Pointer<ffi.Char> MessageContent,
      ) {
    return _SendAnySingleMessage(
      cmd,
      messageType,
      fromId,
      toId,
      MessageContent,
    );
  }

  late final _SendAnySingleMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              GoUint16,
              GoInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SendAnySingleMessage');
  late final _SendAnySingleMessage = _SendAnySingleMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> SendAnyGroupleMessage(
      int cmd,
      int messageType,
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      ffi.Pointer<ffi.Char> MessageContent,
      ) {
    return _SendAnyGroupleMessage(
      cmd,
      messageType,
      fromId,
      toId,
      MessageContent,
    );
  }

  late final _SendAnyGroupleMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              GoUint16,
              GoInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SendAnyGroupleMessage');
  late final _SendAnyGroupleMessage = _SendAnyGroupleMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetConversationList() {
    return _GetConversationList();
  }

  late final _GetConversationListPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'GetConversationList');
  late final _GetConversationList =
  _GetConversationListPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMsgList(
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      int lastMsgSyncId,
      ) {
    return _GetMsgList(
      fromId,
      toId,
      lastMsgSyncId,
    );
  }

  late final _GetMsgListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, GoInt64)>>('GetMsgList');
  late final _GetMsgList = _GetMsgListPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> GetGroupMsgList(
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> groupId,
      int lastMsgSyncId,
      ) {
    return _GetGroupMsgList(
      fromId,
      groupId,
      lastMsgSyncId,
    );
  }

  late final _GetGroupMsgListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, GoInt64)>>('GetGroupMsgList');
  late final _GetGroupMsgList = _GetGroupMsgListPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> AddFriend(
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      ffi.Pointer<ffi.Char> message,
      ) {
    return _AddFriend(
      fromId,
      toId,
      message,
    );
  }

  late final _AddFriendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('AddFriend');
  late final _AddFriend = _AddFriendPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ApprovFriendApply(
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> friendId,
      int approvStatus,
      ) {
    return _ApprovFriendApply(
      fromId,
      friendId,
      approvStatus,
    );
  }

  late final _ApprovFriendApplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, GoInt)>>('ApprovFriendApply');
  late final _ApprovFriendApply = _ApprovFriendApplyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> DeleteFriend(
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toIds,
      ) {
    return _DeleteFriend(
      fromId,
      toIds,
    );
  }

  late final _DeleteFriendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('DeleteFriend');
  late final _DeleteFriend = _DeleteFriendPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFriendList() {
    return _GetFriendList();
  }

  late final _GetFriendListPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'GetFriendList');
  late final _GetFriendList =
  _GetFriendListPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> CreateGroup(
      int groupType,
      ffi.Pointer<ffi.Char> groupName,
      ffi.Pointer<ffi.Char> groupMemberList,
      ) {
    return _CreateGroup(
      groupType,
      groupName,
      groupMemberList,
    );
  }

  late final _CreateGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(GoInt, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('CreateGroup');
  late final _CreateGroup = _CreateGroupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> InviteUserJoinGroup(
      ffi.Pointer<ffi.Char> groupId,
      ffi.Pointer<ffi.Char> toIds,
      ) {
    return _InviteUserJoinGroup(
      groupId,
      toIds,
    );
  }

  late final _InviteUserJoinGroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('InviteUserJoinGroup');
  late final _InviteUserJoinGroup = _InviteUserJoinGroupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetGroupList() {
    return _GetGroupList();
  }

  late final _GetGroupListPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'GetGroupList');
  late final _GetGroupList =
  _GetGroupListPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetCustomerMsgList(
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      int MsgLastSequence,
      ) {
    return _GetCustomerMsgList(
      fromId,
      toId,
      MsgLastSequence,
    );
  }

  late final _GetCustomerMsgListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, GoInt)>>('GetCustomerMsgList');
  late final _GetCustomerMsgList = _GetCustomerMsgListPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void StartWork(
      int port,
      ) {
    return _StartWork(
      port,
    );
  }

  late final _StartWorkPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(GoInt64)>>('StartWork');
  late final _StartWork = _StartWorkPtr.asFunction<void Function(int)>();

  void TestStartWork(
      int port,
      ) {
    return _TestStartWork(
      port,
    );
  }

  late final _TestStartWorkPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(GoInt64)>>('TestStartWork');
  late final _TestStartWork =
  _TestStartWorkPtr.asFunction<void Function(int)>();

  void RevokeMessage(
      ffi.Pointer<ffi.Char> msgId,
      ffi.Pointer<ffi.Char> fromId,
      ffi.Pointer<ffi.Char> toId,
      int itemType,
      int msgSequence,
      int msgTime,
      ) {
    return _RevokeMessage(
      msgId,
      fromId,
      toId,
      itemType,
      msgSequence,
      msgTime,
    );
  }

  late final _RevokeMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GoInt64,
              GoInt64,
              GoInt64)>>('RevokeMessage');
  late final _RevokeMessage = _RevokeMessagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int, int)>();

  ffi.Pointer<ffi.Char> Start() {
    return _Start();
  }

  late final _StartPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('Start');
  late final _Start = _StartPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef OpenFunc = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>;
typedef GoUint16 = ffi.UnsignedShort;
